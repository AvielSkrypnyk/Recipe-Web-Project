@page "/login"
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using BlazorApp.Models
@rendermode InteractiveServer

<button class="back-button" style="margin: 5px" onclick="window.location.href='/'">◄ Back to Home</button>

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        <img src="/images/error-checked.gif" style="height: 25px; margin: 3px" />@errorMessage
    </div>
}

@if (successMessage != null)
{
    <div class="alert alert-success">
        <img src="/images/approve-checked.gif" style="height: 25px; margin: 3px" />@successMessage
    </div>
}

<div class="login-container">
    @if (isLoggedIn)
    {
        <h3>Welcome back, @currentUser.Username!</h3>
    }
    else
    {
        <EditForm Model="currentUser" OnValidSubmit="HandleSubmit" FormName="UserLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="login-card">
                <h3>@(isSignUp ? "User Sign Up" : "User Login")</h3>
                <br />

                <div class="form-group text-center">
                    <label for="username">Username:</label>
                    <InputText id="username" class="form-control" @bind-Value="currentUser.Username" />
                </div>

                <div class="form-group text-center">
                    <label for "email">Email:</label>
                    <InputText id="email" class="form-control" @bind-Value="currentUser.Email" />
                </div>

                <div class="form-group text-center">
                    <label for="password">Password:</label>
                    <InputText id="password" class="form-control" type="password" @bind-Value="currentUser.Password" />
                </div>

                @if (isSignUp)
                {
                    <div class="form-group text-center">
                        <label for="confirmPassword">Confirm Password:</label>
                        <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="((RegisterUser)currentUser).ConfirmPassword" />
                    </div>
                }

                <div class="checkbox-wrapper-22 d-flex align-items-center justify-content-center">
                    <label class="switch" for="staySignedInCheckbox">
                        <input type="checkbox" id="staySignedInCheckbox" @bind="StaySignedIn" />
                        <div class="slider round"></div>
                    </label>
                    <label style="margin: 20px">Stay signed in?</label>
                </div>

                <div class="d-flex align-items-center justify-content-center">
                    <button class="btn btn-primary" type="submit" disabled="@isSubmitting">
                        @(isSignUp ? (isSubmitting ? "Signing up..." : "Sign Up") :
                            (isSubmitting ? "Logging in..." : "Login"))
                    </button>
                    <LoadingSpinner IsSubmitting="@isSubmitting"></LoadingSpinner>
                </div>
                <div class="d-flex justify-content-center mb-3" style="margin: 25px">
                    <button type="button" class="btn btn-link" @onclick="ToggleMode">
                        @(isSignUp ? "Already a member? Login" : "Not a member? Sign Up")
                    </button>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    private HttpClient client;
    private User currentUser { get; set; } = new User();
    private string errorMessage;
    private string successMessage;
    public bool isSubmitting { get; set; }
    public bool isSignUp { get; set; } = false;
    private bool StaySignedIn { get; set; } = false;
    private bool isLoggedIn { get; set; } = false;
    private bool hasRendered { get; set; } = false;

    protected override void OnInitialized()
    {
        client = HttpClientFactory.CreateClient("MyApiClient");
        ResetForm();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check session storage for existing user data
            var storedUser = await sessionStorage.GetItemAsync<User>("currentUser");
            var staySignedIn = await sessionStorage.GetItemAsync<bool>("StaySignedIn");

            if (storedUser != null && staySignedIn)
            {
                currentUser = storedUser;
                successMessage = "Welcome back!";
                isLoggedIn = true;
            }

            hasRendered = true;
            StateHasChanged(); // Trigger a re-render
        }
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            HttpResponseMessage response;
            if (isSignUp)
            {
                // HTTP POST request to Sign Up
                response = await client.PostAsJsonAsync("api/users/signup", (RegisterUser)currentUser);
            }
            else
            {
                // HTTP POST request to Login
                response = await client.PostAsJsonAsync("api/users/login", currentUser);
            }

            if (response.IsSuccessStatusCode)
            {
                successMessage = isSignUp ? "Sign up successful!" : "Login successful!";
                isLoggedIn = true;

                // If "Stay Signed In" is selected, store user data in session storage
                if (!isSignUp && StaySignedIn)
                {
                    await sessionStorage.SetItemAsync("currentUser", currentUser);
                    await sessionStorage.SetItemAsync("StaySignedIn", StaySignedIn);
                }

                ResetForm();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"{(isSignUp ? "Sign up" : "Login")} failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        currentUser = isSignUp ? new RegisterUser() : new User();
    }

    private void ToggleMode()
    {
        isSignUp = !isSignUp;
        ResetForm();
    }
}